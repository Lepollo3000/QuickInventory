@inject NavigationManager NavigationManager

<AuthorizeView>
    <Authorized>
        @* <MudButton Color="Color.Inherit"
                   Href="account/manage">
            Hola, @(context.User.Identity?.Name)!
        </MudButton> *@

        <MudButton Color="Color.Inherit">
            Hola, @(context.User.Identity?.Name)!
        </MudButton>

        <form action="Account/Logout" method="post">
            <AntiforgeryToken />
            <input type="hidden" name="ReturnUrl" value="@currentUrl" />
            <MudButton Color="Color.Inherit"
                       ButtonType="ButtonType.Submit">
                Logout
            </MudButton>
        </form>
    </Authorized>

    <NotAuthorized>
        <MudButton Color="Color.Inherit"
                   Href="@($"account/login?returnUrl={Uri.EscapeDataString(NavigationManager.Uri)}")">
            Iniciar Sesión
        </MudButton>
    </NotAuthorized>
</AuthorizeView>

@code {
    private string? currentUrl;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    public void BeginLogOut()
    {
        NavigationManager.NavigateTo($"account/logout?returnUrl={Uri.EscapeDataString(NavigationManager.Uri)}");
    }

    public void BeginLogIn()
    {
        NavigationManager.NavigateTo($"account/login?returnUrl={Uri.EscapeDataString(NavigationManager.Uri)}");
    }
}
