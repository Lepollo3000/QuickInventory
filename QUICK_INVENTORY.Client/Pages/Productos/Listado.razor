@attribute [Route(ApplicationPages.Productos.Listado)]
@attribute [Authorize]

<PageTitle>Productos</PageTitle>

<MudGrid Justify="Justify.FlexEnd" Class="mb-3">
    <MudButton Color="Color.Primary"
               Variant="Variant.Filled"
               Href="@ApplicationPages.Productos.Crear"
               EndIcon="@Icons.Material.Filled.Add">
        Alta de Producto
    </MudButton>
</MudGrid>

<MudDataGrid T="ProductoTableModel" ServerData="ServerReload" Dense="true" Hover="true">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Productos</MudText>
    </ToolBarContent>

    <Columns>
        <PropertyColumn Property="x => x.Locacion" Title="@(DisplayHelper<ProductoTableModel>.GetPropertyDisplayName(model => model.Locacion))" />
        <PropertyColumn Property="x => x.Nombre" Title="@(DisplayHelper<ProductoTableModel>.GetPropertyDisplayName(model => model.Nombre))" />
        <PropertyColumn Property="x => x.Descripcion" Title="@(DisplayHelper<ProductoTableModel>.GetPropertyDisplayName(model => model.Descripcion))" />
        <PropertyColumn Property="x => x.StockMedidaId" Title="@(DisplayHelper<ProductoTableModel>.GetPropertyDisplayName(model => model.StockMedidaId))" />
        <PropertyColumn Property="x => x.StockMinimo" Title="@(DisplayHelper<ProductoTableModel>.GetPropertyDisplayName(model => model.StockMinimo))" />
        <PropertyColumn Property="x => x.StockMaximo" Title="@(DisplayHelper<ProductoTableModel>.GetPropertyDisplayName(model => model.StockMaximo))" />
    </Columns>

    <NoRecordsContent>
        <MudText>No se encontró ningún registro.</MudText>
    </NoRecordsContent>

    <LoadingContent>
        <MudText>Cargando...</MudText>
    </LoadingContent>

    <PagerContent>
        <MudDataGridPager T="ProductoTableModel" />
    </PagerContent>
</MudDataGrid>


@code {
    [Inject]
    public IApplicationServices Services { get; set; } = null!;

    private async Task<GridData<ProductoTableModel>> ServerReload(GridState<ProductoTableModel> state)
    {
        var data = await Services
            .Productos.ConsultarProductos();

        var totalItems = data.Value.Count();

        var pagedData = data.Value
            .Skip(state.Page * state.PageSize)
            .Take(state.PageSize)
            .ToList();

        return new GridData<ProductoTableModel>() { TotalItems = totalItems, Items = pagedData };
    }
}
